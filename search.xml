<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS8国内镜像下载地址</title>
    <url>/2021/11/16/CentOS8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CentOS介绍"><a href="#CentOS介绍" class="headerlink" title="CentOS介绍"></a>CentOS介绍</h2><p>  CentOS 是基于 Red Hat Enterprise Linux (RHEL / 业界最知名的发行版) 源代码再编译出来的免费版，因此不仅继承 RHEL 优越的稳定性（与 Debian 不分上下），还提供免费更新，因此在服务器提供商、中小型公司中装机量几乎是最大最流行的 Linux 系统，现在也已正式加入红帽公司。从事互联网技术的同学，CentOS 应该是值得你深入了解学习研究的……</p>
<h2 id="CentOS-Linux-和-CentOS-Stream-区别"><a href="#CentOS-Linux-和-CentOS-Stream-区别" class="headerlink" title="CentOS Linux 和 CentOS Stream 区别"></a>CentOS Linux 和 CentOS Stream 区别</h2><p>在 CentOS 的官网上，你会看到有两个不同的版本 CentOS Linux 和 CentOS Stream。其中 CentOS Linux 就是我们传统使用的稳定版系统。那么 CentOS Stream 是什么版本呢？</p>
<p>其实 Centos Stream 是一个面向开发者的滚动发布的 Linux 发行版，它介于 Fedora Linux 的上游开发和 RHEL 的下游开发之间而存在。你可以把 CentOS Streams 当成是用来体验最新红帽系 Linux 特性的一个版本。</p>
<p>因此，如果你不是开发者，并打算将 CentOS 用于服务器，用于正式生产环境使用、追求稳定性，或者个人日常使用，都更推荐使用传统的 CentOS Linux 这个版本。</p>
<h2 id="镜像下载说明"><a href="#镜像下载说明" class="headerlink" title="镜像下载说明"></a>镜像下载说明</h2><p><a href="https://mirrors.aliyun.com/centos/8/isos/x86_64/">阿里CentOS8下载</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/centos/8/isos/x86_64/">清华CentOS8下载</a></p>
<p><a href="https://www.centos.org/download/">CentOS8官网下载</a></p>
]]></content>
      <tags>
        <tag>CentOS</tag>
        <tag>CentOS8</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 自动获取IP地址图文详解</title>
    <url>/2021/11/16/CentOs7%20%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96IP%E5%9C%B0%E5%9D%80%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>环境:<br>VMware workstation 12<br>CentOs7</p>
<p>当我们在VMware workstation 安装好CentOs后，IP地址默认不是自动获取的，如下图：<br><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20210619151648.png"></p>
<p>要设置CentOs7自动获取IP地址，需要进入系统网络配置文件夹，输入命令 ： “cd /etc/sysconfig/network-scripts/”，然后再输入 “ls” ,如下图所示：</p>
<p><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20210619151714.png"></p>
<p>然后可以直接输入 “vi ifcfg-ens33” 进行修改，如下图 ：</p>
<p><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20210619151736.png"></p>
<p>修改后如下：</p>
<p><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20210619151804.png"></p>
<p>当然也可以直接输入 ： “ vi /etc/sysconfig/network-scripts/ifcfg-ens33 “ 进行编辑，如下图：</p>
<p><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20210619151822.png"></p>
<p>修改完成后，“ :wq! ” 保存并退出，接下来就是重启网络服务咯，可以在根目录直接</p>
<p>输入“service network restart” 重启, 当然也有的人可能遇到有的CentOs版本</p>
<p>对“Service network restart”命令不起作用，但是我告诉还有一种方法，进入</p>
<p>到普通用户可以使用的命令的存放目录 “/bin”下，</p>
<p>再输入 “ Systemctl restart network”，具体如下图：<br><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20210619151850.png"></p>
<p>注意，老版的Centos查看ip地址命令为 : “ ipconfig -a “ ,Centos7版本为 ： “ ip addr “ </p>
<p>好了，修改完成后输入： “ ip addr “ ， 进行查看，如下图 : </p>
<p><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20210619151914.png"></p>
]]></content>
      <tags>
        <tag>CentOS</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware Workstation Pro v16.2.1 官方版+激活密钥</title>
    <url>/2021/11/18/VMware%20Workstation%20Pro%20v16.2.1%20%E5%AE%98%E6%96%B9%E7%89%88+%E6%BF%80%E6%B4%BB%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>VMware Workstation Pro 是将多个操作系统作为虚拟机 (VM) 在单台 Linux 或 Windows PC 上运行的行业标准。为任何设备、平台或云环境构建、测试或演示软件的 IT 专业人员、开发人员和企业都可以信赖 Workstation Pro。</p>
<h2 id="VMware-Workstation-Pro-16-的新功能特性"><a href="#VMware-Workstation-Pro-16-的新功能特性" class="headerlink" title="VMware Workstation Pro 16 的新功能特性"></a>VMware Workstation Pro 16 的新功能特性</h2><h3 id="容器和Kubernetes支持"><a href="#容器和Kubernetes支持" class="headerlink" title="容器和Kubernetes支持"></a>容器和Kubernetes支持</h3><p>使用vctl CLI 构建/运行/拉/推容器映像。<br>支持在Workstation Pro顶部运行的KIND kubernetes集群。<br>注意：需要Windows 10 1809或更高版本</p>
<h3 id="新来宾操作系统支持"><a href="#新来宾操作系统支持" class="headerlink" title="新来宾操作系统支持"></a>新来宾操作系统支持</h3><p>RHEL 8.2<br>Debian的10.5<br>Fedora的32<br>CentOS的8.2<br>SLE 15 SP2 GA<br>FreeBSD 11.4<br>ESXi 7.0<br>来宾中对DirectX 11和OpenGL 4.1的支持</p>
<h3 id="沙盒图形"><a href="#沙盒图形" class="headerlink" title="沙盒图形"></a>沙盒图形</h3><p>通过从vmx中删除图形渲染并将其作为单独的沙箱进程运行，可以增强虚拟机的安全性。</p>
<h3 id="USB-3-1控制器支持"><a href="#USB-3-1控制器支持" class="headerlink" title="USB 3.1控制器支持"></a>USB 3.1控制器支持</h3><p>虚拟机虚拟XHCI控制器从USB 3.0更改为USB 3.1，以支持10 Gbps。</p>
<h3 id="更大的虚拟机"><a href="#更大的虚拟机" class="headerlink" title="更大的虚拟机"></a>更大的虚拟机</h3><p>32个虚拟CPU<br>128 GB虚拟内存<br>注意：运行具有32个vCPU的虚拟机要求您的主机和客户机操作系统都支持32个逻辑处理器。<br>8 GB虚拟图形内存</p>
<h3 id="暗模式"><a href="#暗模式" class="headerlink" title="暗模式"></a>暗模式</h3><p>Workstation 16 Pro支持暗模式，以优化用户体验。</p>
<p>注意：要求主机操作系统为Windows 10 1809或更高版本</p>
<h3 id="vSphere-7-0支持"><a href="#vSphere-7-0支持" class="headerlink" title="vSphere 7.0支持"></a>vSphere 7.0支持</h3><p>在Workstation 16中，您可以执行以下操作：</p>
<p>连接到vSphere 7.0。<br>将本地虚拟机上载到vSphere 7.0。<br>将在vSphere 7.0上运行的远程虚拟机下载到本地桌面。</p>
<h3 id="性能改进"><a href="#性能改进" class="headerlink" title="性能改进"></a>性能改进</h3><p>提高文件传输速度（拖放，复制和粘贴）<br>改善了虚拟机关闭时间。<br>改进的虚拟NVMe存储性能。</p>
<h3 id="改进的辅助功能支持"><a href="#改进的辅助功能支持" class="headerlink" title="改进的辅助功能支持"></a>改进的辅助功能支持</h3><p>添加了可访问性改进，因此Workstation Pro符合WCAG 2.1标准。</p>
<p><a href="https://img.lovestu.com/uploads/2020/06/20200916090035.jpg"><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20211118142420.png" alt="VMware Workstation Pro v16.2.1 官方版+激活密钥"></a></p>
<h2 id="激活方式"><a href="#激活方式" class="headerlink" title="激活方式"></a>激活方式</h2><h3 id="16版本"><a href="#16版本" class="headerlink" title="16版本"></a>16版本</h3><p>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p>
<h3 id="15版本"><a href="#15版本" class="headerlink" title="15版本"></a>15版本</h3><p>可以使用网盘附带的注册机算key激活，或者直接使用下面的一组激活即可</p>
<p>FG78K-0UZ15-085TQ-TZQXV-XV0CD</p>
<p>ZA11U-DVY97-M81LP-4MNEZ-X3AW0</p>
<p>YU102-44D86-48D2Z-Z4Q5C-MFAWD</p>
<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>支持使用2011年或以后推出的使用处理器（CPU）的系统， 但 以下情况除外：</p>
<p>基于2011 Bonnell微体系结构的Intel Atom处理器。例如，Atom Z670 / Z650和Atom N570。<br>使用基于2012 Saltwell微体系结构的Intel Atom处理器的系统。例如，Atom S1200，Atom D2700 / D2500和Atom N2800 / N2600。<br>使用基于Llano和Bobcat微体系结构的AMD处理器的系统。例如，代号为Hondo，Ontario，Zacate和Llano。<br>以下系统 都 还支持：使用基于2010的Westmere微架构系统的英特尔处理器。例如，至强5600，至强3600，Core i7-970，Core i7-980和Core i7-990。</p>
<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>已解决的问题：<br>颜色主题选项在 VMware Workstation 首选项中不可见。<br>颜色主题在 VMware Workstation 首选项中不可见，因为该功能现在默认处于停用状态。要使用颜色主题功能，用户必须手动激活该功能。<br>新建虚拟机向导中的自定义硬件按钮不起作用：<br>创建虚拟机时，如果单击新建虚拟机向导上的自定义硬件按钮，向导会崩溃。</p>
<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>官网下载：</p>
<p><a href="https://www.vmware.com/go/getworkstation-win">https://www.vmware.com/go/getworkstation-win</a></p>
<p>已高速(如有密码：3519) <a href="http://ct.ghpym.com/d/7369060-41496370-0d53b8">http://ct.ghpym.com/d/7369060-41496370-0d53b8</a></p>
<p>已高速<a href="http://www.123pan.com/s/HQeA-aX1Sh">http://www.123pan.com/s/HQeA-aX1Sh</a></p>
<p>链接：<a href="https://pan.baidu.com/s/1sa7Fq9AW2Nsx4tsM5CrFXA">https://pan.baidu.com/s/1sa7Fq9AW2Nsx4tsM5CrFXA</a><br>提取码：fpii</p>
]]></content>
      <tags>
        <tag>VMware</tag>
        <tag>VM</tag>
        <tag>密钥</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio 2019密钥</title>
    <url>/2021/06/24/Visual%20Studio%202019%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Visual Studio 2019 Enterprise（企业版）：<strong>BF8Y8-GN2QH-T84XB-QVY3B-RC4DF</strong></p>
<p>Visual Studio 2019 Professional（专业版）：<strong>NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y</strong></p>
]]></content>
      <tags>
        <tag>密钥</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue前端 Node后台</title>
    <url>/2020/12/31/Vue%20Node%E5%90%8E%E7%AB%AF%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前端入坑，摸索Electron、VUE、Node等多个知识，想搭建一套VUE+Node的后台工具框架，作为入手。</p>
<h2 id="搭建Demo项目"><a href="#搭建Demo项目" class="headerlink" title="搭建Demo项目"></a>搭建Demo项目</h2><h3 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h3><p>前端 ： Node+Vue，<br>后台 ：NodeJS<br>通信 ：Socket</p>
<h3 id="前端搭建"><a href="#前端搭建" class="headerlink" title="前端搭建"></a>前端搭建</h3><p>必要插件列表：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Node</li>
<li><input checked="" disabled="" type="checkbox"> Vue（Vuetify）</li>
<li><input checked="" disabled="" type="checkbox"> TypeScript</li>
<li><input checked="" disabled="" type="checkbox"> Socket</li>
</ul>
<h3 id="后台搭建"><a href="#后台搭建" class="headerlink" title="后台搭建"></a>后台搭建</h3><ul>
<li><input checked="" disabled="" type="checkbox"> Node</li>
<li><input checked="" disabled="" type="checkbox"> Socket</li>
</ul>
<h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5>]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuetify前端搭建</title>
    <url>/2020/12/31/Vuetify%E5%89%8D%E7%AB%AF%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol>
<li><p>启动vue-cli：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输入：vue ui</span><br></pre></td></tr></table></figure></li>
<li><p>参考：<br> <a href="https://blog.csdn.net/qq_42711864/article/details/85704099">https://blog.csdn.net/qq_42711864/article/details/85704099</a></p>
</li>
<li><p>添加vuetify：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">选择：vue add vuetify</span><br></pre></td></tr></table></figure></li>
<li><p>main.ts代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">// import Vuetify from &quot;vuetify&quot;;</span><br><span class="line">import App from &quot;./App.vue&quot;;</span><br><span class="line">import Test from &#x27;./views/Test.vue&#x27;;</span><br><span class="line">import router from &quot;./router&quot;;</span><br><span class="line">import store from &quot;./store&quot;;</span><br><span class="line">import &quot;vuetify/dist/vuetify.min.css&quot;; //css 需引入</span><br><span class="line">import &quot;material-design-icons-iconfont/dist/material-design-icons.css&quot;; //vuetify依赖的图标</span><br><span class="line">import vuetify from &quot;./plugins/vuetify&quot;;</span><br><span class="line"></span><br><span class="line">// Vue.use(Vuetify);</span><br><span class="line">Vue.config.productionTip = false;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  vuetify,</span><br><span class="line">  render: h =&gt; h(Test)</span><br><span class="line">&#125;).$mount(&quot;#app&quot;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul>
<li><a href="https://vuetifyjs.com/en/getting-started/installation/#vue-cli-install">Vue官网</a></li>
<li><a href="https://blog.csdn.net/u011737005/article/details/105822944">vue+vuetify+typescript中添加vuetify声明</a></li>
<li><a href="https://blog.csdn.net/qq_42711864/article/details/85704099">TypeScript+Vue+vuetify的项目搭建</a></li>
</ul>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>Vuetify</tag>
      </tags>
  </entry>
  <entry>
    <title>windows10下安装MSYS2+MinGW64</title>
    <url>/2021/11/18/windows10%E4%B8%8B%E5%AE%89%E8%A3%85MSYS2+MinGW64/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol>
<li><p>下载msys2，官方地址：<a href="http://www.msys2.org/%EF%BC%8C%E8%BF%99%E9%87%8C%E9%80%89%E6%8B%A964%E4%BD%8D%E7%9A%84%E5%AE%89%E8%A3%85%E5%99%A8">http://www.msys2.org/，这里选择64位的安装器</a></p>
</li>
<li><p>安装完成之后，先别启动msys2，在 安装根目录/etc/pacman.d/ 下找到mirrorlist.mingw32、mirrorlist.mingw64和mirrorlist.msys并进行修改。</p>
</li>
</ol>
<p>mirrorlist.mingw32文件添加一行，Server = <a href="http://mirrors.ustc.edu.cn/msys2/mingw/i686/">http://mirrors.ustc.edu.cn/msys2/mingw/i686/</a></p>
<p>mirrorlist.mingw64文件添加一行，Server = <a href="http://mirrors.ustc.edu.cn/msys2/mingw/x86_64/">http://mirrors.ustc.edu.cn/msys2/mingw/x86_64/</a></p>
<p>mirrorlist.msys文件添加一行，Server = <a href="http://mirrors.ustc.edu.cn/msys2/msys/$arch/">http://mirrors.ustc.edu.cn/msys2/msys/$arch/</a></p>
<ol start="3">
<li>在win10菜单中找到MSYS 64bit并启动MSYS2 MinGW 64-bit</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20211118160327.png"><br><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20211118160342.png"></p>
<ol start="4">
<li>认识下命令</li>
</ol>
<p>pacman -Syu =&gt; 同步软件库并更新系统到最新状态</p>
<p>pacman -S package_name1 package_name2 =&gt; 安装或者升级单个软件包，或者一列软件包（包含依赖包）</p>
<p>pacman -R package_name =&gt; 删除单个软件包</p>
<p>pacman -Rs package_name =&gt; 删除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系</p>
<ol start="5">
<li><p>输入pacman -Syu 更新软件库, 完结后直接点击关闭按钮来关闭窗口</p>
</li>
<li><p>重新来一次第2个步骤(这个时候因为更新软件库的原因导致第2个步骤里面的三个文件被覆盖了)</p>
</li>
<li><p>使用命令安装mingw64等必要的软件(一个一个地安装)</p>
</li>
</ol>
<p>pacman -S gcc</p>
<p>pacman -S mingw-w64-x86_64-toolchain</p>
<p>pacman -S mingw-w64-i686-toolchain</p>
<p>pacman -S mingw-w64-x86_64-SDL2</p>
<p>pacman -S mingw-w64-i686-SDL2</p>
<p>pacman -S base-devel</p>
<p>pacman -S vim</p>
<p>pacman -S yasm</p>
<p>pacman -S nasm</p>
<p>pacman -S make</p>
]]></content>
      <tags>
        <tag>win10</tag>
        <tag>msys2</tag>
        <tag>mingw</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows下编译QuickJS</title>
    <url>/2021/11/18/%E5%9C%A8Windows%E4%B8%8B%E7%BC%96%E8%AF%91QuickJS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文介绍如何在Windows下依赖MSYS2编译QuickJS。</p>
<h2 id="安装MSYS2"><a href="#安装MSYS2" class="headerlink" title="安装MSYS2"></a>安装MSYS2</h2><p>这里我们采用清华大学镜像在Windows系统下安装MSYS2。</p>
<p>安装完成后，按照pacman配置配置好镜像源（参考镜像站说明）。</p>
<h2 id="安装QuickJS环境"><a href="#安装QuickJS环境" class="headerlink" title="安装QuickJS环境"></a>安装QuickJS环境</h2><p>由于Windows下目前只支持32位系统编译，这里我们安装32位系统的编译环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pacman -S mingw-w64-i686-toolchain</span><br><span class="line">pacman -S mingw-w64-i686-dlfcn</span><br><span class="line">pacman -S make</span><br></pre></td></tr></table></figure>
<p>至此完成了编译环境的配置</p>
<h2 id="编译QuickJS"><a href="#编译QuickJS" class="headerlink" title="编译QuickJS"></a>编译QuickJS</h2><p>现在我们编译QuickJS，首先我们配置下Makefile中的</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">prefix=/home/Administrator/quickjs</span><br></pre></td></tr></table></figure>
<p>然后执行make install进行编译，完成编译后则在/home/Administrator/quickjs目录下看到quickjs相关的可执行文件。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>可以在<a href="https://github.com/quickjs-zh/QuickJS/pulls">QuickJS中文Issues</a>中提出。</p>
<p>Page Index for this GitHub Wiki</p>
]]></content>
      <tags>
        <tag>msys2</tag>
        <tag>windows</tag>
        <tag>quickjs</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Hexo博客</title>
    <url>/2021/11/16/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><p><strong>hexo搭建</strong><br>参考：<a href="https://eliyar.biz/how_to_build_hexo_blog/">https://eliyar.biz/how_to_build_hexo_blog/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">hexo init</span><br><span class="line">npm i</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
<li><p><strong>hexo编译报错</strong><br>解决方法：node10升级到node14.</p>
</li>
<li><p><strong>hexo init 卡主</strong><br>解决方法：<br>D:\nodejs\node_global\node_modules\hexo-cli\lib\console\init.js文件中，<br>const GIT_REPO_URL = ‘<a href="https://github.com/hexojs/hexo-starter.git&#39;">https://github.com/hexojs/hexo-starter.git&#39;</a> 修改为：<br>const GIT_REPO_URL = ‘<a href="https://github.com/">https://github.com</a> <strong>.cnpmjs.org</strong> /hexojs/hexo-starter.git’;</p>
</li>
<li><p><strong>github部署</strong><br>参考：<a href="https://cloud.tencent.com/developer/article/1662782">https://cloud.tencent.com/developer/article/1662782</a></p>
</li>
<li><p><strong>hexo d提交报警告：warning: CRLF will be replaced by LF in public/assets/css/style.css</strong><br>解决方法，参考：<a href="https://www.codegrepper.com/code-examples/whatever/warning%3A+CRLF+will+be+replaced+by+LF+in+public%2Fassets%2Fcss%2Fstyle.css">https://www.codegrepper.com/code-examples/whatever/warning%3A+CRLF+will+be+replaced+by+LF+in+public%2Fassets%2Fcss%2Fstyle.css</a>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>玩skynet服务器（一）</title>
    <url>/2021/11/16/%E7%8E%A9skynet%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ul>
<li><a href="https://github.com/cloudwu/skynet/wiki">Home</a></li>
<li><a href="https://github.com/cloudwu/skynet/wiki/GettingStarted">GettingStarted</a></li>
<li><a href="https://github.com/cloudwu/skynet/wiki/Community">社区</a></li>
</ul>
<p>skynet，github链接：<br><a href="https://github.com/cloudwu/skynet/">https://github.com/cloudwu/skynet/</a></p>
<h3 id="实操踩坑"><a href="#实操踩坑" class="headerlink" title="实操踩坑"></a>实操踩坑</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/cloudwu/skynet.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 替换为cnpmjs.org:</span></span><br><span class="line">git clone https://github.com.cnpmjs.org/cloudwu/skynet.git</span><br><span class="line">cd skynet</span><br><span class="line">make &#x27;linux&#x27; # make &#x27;PLATFORM&#x27;  # PLATFORM can be linux, macosx, freebsd now</span><br></pre></td></tr></table></figure>

<ul>
<li>提示报错：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Oscargw/FigureBed/master/20210608142947.png"></p>
<p>缺少make。解决方法 - 运行安装make命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc automake autoconf libtool make</span><br></pre></td></tr></table></figure>



<ul>
<li>提示报错：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">autoconf: command not found</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决方法：</span></span><br><span class="line">yum install autoconf</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>skynet</tag>
      </tags>
  </entry>
  <entry>
    <title>给博客添加Waline评论</title>
    <url>/2021/11/16/%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Waline%E8%AF%84%E8%AE%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>参考文档：<br><a href="https://waline.js.org/get-started.html#vercel-%E9%83%A8%E7%BD%B2">Waline-快速上手</a></li>
<li>需要使用LeanCloud，参考：<br><a href="https://console.leancloud.app/apps">LeanCloud - https://console.leancloud.app/apps</a></li>
<li>Vercel部署：<br>直接点击：<a href="https://vercel.com/new/git/external?repository-url=https://github.com/walinejs/waline/tree/main/example">Vercel</a><br>一定要从leancloud拿到 <strong>LEAN_ID</strong>，<strong>LEAN_KEY</strong>，<strong>LEAN_MASTER_KEY</strong></li>
<li>获取serverURL<br>部署后，点击visit，拿到serverURL， <a href="https://xxxxxx.vercel.app,配置到主题.xml/">https://xxxxxx.vercel.app，配置到主题.xml</a></li>
<li>注册管理员。<br>点击<serverURL>/ui/register注册。</li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>waline</tag>
      </tags>
  </entry>
  <entry>
    <title>网页收藏（私人）</title>
    <url>/2021/11/16/%E7%BD%91%E9%A1%B5%E6%94%B6%E8%97%8F%EF%BC%88%E7%A7%81%E4%BA%BA%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://www.markdown.xyz/">Markdown基本语法</a></li>
</ul>
]]></content>
      <tags>
        <tag>网页</tag>
        <tag>收藏</tag>
      </tags>
  </entry>
</search>
